<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:local="*">
	
	
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	
	
	<fx:Script>
		<![CDATA[
			import flash.trace.Trace;
			
			import org.as3.mvcsInjector.utils.Tracer;
			
			import uk.co.baremedia.gnomo.models.ModelModes;
			import uk.co.baremedia.gnomo.utils.DecreaseIncreaseRate;
			import uk.co.baremedia.gnomo.utils.RateVO;
			import uk.co.baremedia.gnomo.utils.Resizer;
			
			public static const MONITOR_WIDTH:Number 	= 155;
			public static const MONITOR_HEIGHT:Number 	= 107;
			public static const COMMON_PADDING:Number 	= 30;
			public static const TOP_TEXT_WIDTH:Number 	= 289;
			public static const TOP_TEXT_HEIGHT:Number 	= 30;
			public static const CONNECTED_WIDTH:Number 	= 39;
			public static const CONNECTED_HEIGHT:Number = 41;
			
			[Bindable] public var model					:ModelModes;
			[Bindable] public var activityMonitorWidth	:Number;
			[Bindable] public var activityMonitorHeight	:Number;
			[Bindable] public var commonPadding 		:Number = 15;
			
			[Bindable] protected var _visorWidth 		:Number;
			[Bindable] protected var _visorHeight 		:Number;
			
			
			protected var _scaleRate					:RateVO;
			
			public function set elementsPercentage(value:Number):void
			{
				var tmpWidth:Number  		= TOP_TEXT_WIDTH	+ (TOP_TEXT_WIDTH  * value); 
				var tmpHeight:Number 		= TOP_TEXT_HEIGHT  + (TOP_TEXT_HEIGHT * value);  
				var tmpCommonPadding:Number = COMMON_PADDING + (COMMON_PADDING * (value*2) );
				
				if( isValidNumber(tmpWidth) && isValidNumber(tmpHeight) )
				{
					topTextNote.width = tmpWidth;
					topTextNote.height= tmpHeight;
				}
				
				connectedStatusPercentage = value;
			}
			
			public function set connectedStatusPercentage(value:Number):void
			{
				var tmpWidth:Number  = CONNECTED_WIDTH	+ (CONNECTED_WIDTH  * value); 
				var tmpHeight:Number = CONNECTED_HEIGHT + (CONNECTED_HEIGHT * value); 
				
				if( isValidNumber(tmpWidth) && isValidNumber(tmpHeight) )
				{
					connectedStatus.width 	= tmpWidth;
					connectedStatus.height	= tmpHeight;
				}
			}
			
			public function set monitorPercentage(value:Number):void
			{
				var tmpWidth:Number  		= MONITOR_WIDTH   + (MONITOR_WIDTH  * value); 
				var tmpHeight:Number 		= MONITOR_HEIGHT  + (MONITOR_HEIGHT * value); 
				
				if( isValidNumber(tmpWidth) && isValidNumber(tmpHeight) )
				{
					Tracer.log(this, "monitorPercentage - tmpWidth: "+tmpWidth+" tmpHeight: "+tmpHeight);
					monitor.width 	= tmpWidth;
					monitor.height	= tmpHeight;
				}
			}
			
			protected function isValidNumber(number:Number):Boolean
			{
				return (!isNaN(number) && number != 0 && number != Infinity);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<local:Visor
		id="visor"
		width="100%"
		height="100%" />
	
	<local:TopTexNote
		id="topTextNote"
		y="{ commonPadding }"
		x="{ commonPadding }"
		textTopNoteValue="{ model.textTopNote }"/>
	
	<local:ConnectedStatus
		id="connectedStatus"
		y="{ commonPadding }"
		x="{  width  - (connectedStatus.width + commonPadding) }"
		connectedStatus="{ model.localNetworkConnected }"/>
	
	<local:MovieClipBaby
		id="monitor"
		x="{ width / 2 - monitor.width / 2 }"
		y="{ connectedStatus.y + connectedStatus.height + commonPadding }"
		width="{ activityMonitorWidth }"
		height="{ activityMonitorHeight }"
		mode="{ model.monitorMode }" />
	
</s:Group>
