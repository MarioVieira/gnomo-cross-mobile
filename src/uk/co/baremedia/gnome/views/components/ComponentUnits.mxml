<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:local="*"
		xmlns:p2p="com.projectcocoon.p2p.*" 
		xmlns:components="uk.co.baremedia.gnome.views.components.*"
		xmlns:elements="views.elements.*"
		
		title="{ UtilsResources.getKey(EnumsLanguage.BABY_CALL) }" 
		creationComplete=" updateMeasures() ">
	
	<fx:Script>
		<![CDATA[ 
			import assets.Images;
			
			import flash.sensors.Accelerometer;
			
			import mx.core.DPIClassification;
			import mx.core.FlexGlobals;
			import mx.events.ResizeEvent;
			
			import org.as3.mvcsInjector.utils.Tracer;
			
			import spark.components.SkinnablePopUpContainer;
			
			import uk.co.baremedia.gnomo.enums.EnumsLanguage;
			import uk.co.baremedia.gnomo.presentation.PresentationUnits;
			import uk.co.baremedia.gnomo.utils.DecreaseIncreaseRate;
			import uk.co.baremedia.gnomo.utils.RateVO;
			import uk.co.baremedia.gnomo.utils.Resizer;
			import uk.co.baremedia.gnomo.utils.UtilsDeviceInfo;
			import uk.co.baremedia.gnomo.utils.UtilsResources;  
			
			public static const MONITOR_WIDTH:Number 	= 155;
			public static const MONITOR_HEIGHT:Number 	= 107;
			
			[Bindable] protected var _presentationModel		:PresentationUnits;
			
			private var _currentAlert:SkinnablePopUpContainer;
			[Bindable] private var percentVisorVerticalGap:Number;
			
			override protected function childrenCreated():void
			{
				button.setStyle("cornerRadious", 0);
				
				CONFIG::DESKTOP
				{
/* 					button.height = 45; */
				}
				
/* 				button.visible = true; */
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				invalidateDisplayList();
				updateMeasures();
			}
			 
			public function set presentationModel(value:PresentationUnits):void
			{
				_presentationModel = value;
				_presentationModel.openAlert.add(onOpenAlert);
				alerts.closeAlert.add(onCloseAlert);
				_presentationModel.checkHasToShowAlerts();
				monitor.model = _presentationModel.modelMonitor;
				
				updateSensibilitySlider();
			}
			
			public function get presentationModel():PresentationUnits
			{
				return _presentationModel;
			}
			
			private function onOpenAlert(alertPopupId:String):void
			{
				//Tracer.log(this, "onOpenAlert - alertPopupId: "+alertPopupId);
				if(alertPopupId != null)
					openAlert(this.alerts[alertPopupId]);
				else if(_currentAlert && _currentAlert.id != PresentationUnits.ALERT_IMPORTANT)
					_currentAlert.close();
			}
			
			private function onCloseAlert():void
			{
				if(_currentAlert.id == PresentationUnits.ALERT_AGREEMENT)
				{
					_presentationModel.agreementAccepted(true);
				}
				
				closeAlert();
			}
			
			public function openAlert(alert:SkinnablePopUpContainer):void
			{
				_currentAlert = alert;
				_currentAlert.open(this, false);
				updateAlertPosition(null);
				addEventListener(ResizeEvent.RESIZE, updateAlertPosition);
			}
			
			protected function closeAlert():void 
			{
				removeEventListener(ResizeEvent.RESIZE, updateAlertPosition);
				_currentAlert.close();
				_presentationModel.alertClosed(_currentAlert.id);
			}
			
			public function updateAlertPosition(e:Event):void
			{
				if(_currentAlert.isOpen)
				{
					_currentAlert.width  = FlexGlobals.topLevelApplication.systemManager.screen.width;
					_currentAlert.height = FlexGlobals.topLevelApplication.systemManager.screen.height;
				}
			}
			
			
			protected function updateMeasures():void
			{
				setValues();
				setMonitorMeasures();
			}	
			
			private function setMonitorMeasures():void
			{
				var rect:Rectangle  = (monitor.height > monitor.width) ? Resizer.scaleByAspectRatio(MONITOR_WIDTH, MONITOR_HEIGHT, 0, monitor.width / 1.5) : Resizer.scaleByAspectRatio(MONITOR_WIDTH, MONITOR_HEIGHT, monitor.height / 1.7, 0); 
				monitor.activityMonitorWidth  = rect.width;
				monitor.activityMonitorHeight = rect.height;
			}
			
			protected function setValues():void
			{
				Tracer.log(this, "setSliderWidth - width: "+width);
				
				/* switch (FlexGlobals.topLevelApplication.applicationDPI)
				{
					case DPIClassification.DPI_320:
					{
						monitor.fontSize			= 60;
						monitor.commonPadding		= 35;
						monitor.elementsPercentage 	= .70;
						slider.width 				= width * .50;
						break;
					}
					case DPIClassification.DPI_240:
					{
						monitor.commonPadding		= 5;
						monitor.fontSize			= 45;
						monitor.commonPadding		= 25;
						monitor.elementsPercentage	= .40;
						slider.width 				= width * .60;
						break;
					}
					default:
					{
						monitor.commonPadding		= 15;
						monitor.fontSize			= 34;
						monitor.elementsPercentage  = 0;
						slider.width 				= width * .90;
						
						break;
					}
						
				} */
				
				if(width <= 320) 		
				{
					monitor.commonPadding		= 15;
					monitor.fontSize			= 34;
					monitor.elementsPercentage  = 0;
					slider.width 				= width * .80;
					percentVisorVerticalGap		= 0;
				}
				else if(width >= 400 && width <= 768)
				{
					monitor.fontSize			= 45;
					monitor.commonPadding		= 25;
					monitor.elementsPercentage	= .40;
					slider.width 				= width * .60;
					percentVisorVerticalGap		= 0;
					/* percentVisorVerticalGap		= (innerGroup) ? (innerGroup.height * 0.01) : 0; */
				}
				else
				{
					monitor.fontSize			= 40;
					monitor.commonPadding		= 25;
					monitor.elementsPercentage 	= .70;
					slider.width 				= width * .50;
					percentVisorVerticalGap 	= 0;
					/* percentVisorVerticalGap		= (innerGroup) ? (innerGroup.height * 0.0166) : 0; */
				} 
			}
			
			private function updateSensibilitySlider():void
			{
				if(slider && _presentationModel)
					slider.value = _presentationModel.sliderLevel;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:ComponentAlerts
			id="alerts"
			width="100%"
			height="100%"/>	
	</fx:Declarations>
	
	<s:Rect
		width="100%"
		height="100%">
		<s:fill>
			<s:SolidColor
				color="#E2E2E2"/>
		</s:fill>
	</s:Rect>
	
	
	<s:HGroup
		horizontalAlign="center"
		width="100%" 
		height="100%">
		
		<s:VGroup
			id="innerGroup"
			horizontalAlign="center"
			width="98%"
			height="100%">
			
			<components:ComponentBabyMonitor
				id="monitor"
				
				width="100%"
				height="100%"/>
			
			<!--<s:Spacer
				height="{percentVisorVerticalGap}"/>-->
			
			<s:VGroup
				horizontalAlign="left"
				gap="0">
				<s:HSlider
					id="slider"
					
					skinClass="uk.co.baremedia.gnome.views.skins.SkinkHSlider"
					thumbRelease="{ _presentationModel.sliderValue = slider.value }"
					value="{ _presentationModel.sliderLevel }"/>
				
				<s:TextArea
					id="textArea"
					mouseFocusEnabled="false"
					mouseChildren="false"
					paddingTop="0"
					width="{ slider.width }"
					minHeight="0"
					text="{ _presentationModel.textSlider }"
					paddingLeft="47"
					fontSize="24"
					focusAlpha="0"
					heightInLines="{ NaN }"
					height="26"
					verticalScrollPolicy="off"
					horizontalScrollPolicy="off"
					fontWeight="bold"
					styleName="appFontSmall"/>
				
				<!--<s:Spacer
					height="{percentVisorVerticalGap}"/>-->
				
			</s:VGroup>
			
			
			<s:Button 
				id="button"
				skinClass="uk.co.baremedia.gnome.views.skins.ButtonSquaredSkin"
				label="{ UtilsResources.getKey(EnumsLanguage.SET_AS_BABY_UNIT) }" 
				click=" _presentationModel.setAsBabyUnit(); " 
				enabled="{ !_presentationModel.broadcasting &amp;&amp; _presentationModel.modelMonitor.localNetworkConnected }"
				styleName="appFontSmall"
				fontWeight="bold"
				fontSize="20"
				visible="true"
				width="{innerGroup.width - 15}"/>

			<s:Spacer
				id="spacer"
				height="{button.height / 8}"/>
			
		</s:VGroup>
		
	</s:HGroup>
	
</s:View>
