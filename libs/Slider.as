package{		import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*;	import flash.geom.Rectangle;	import flash.utils.*;	import caurina.transitions.Tweener;	import flash.events.Event;		public class Slider extends MovieClip 	{		public function Slider()		{			buildUI();		}				private var _thumbBounds	:Rectangle;		private var _scrubbing		:Boolean;				//add childs to the stage, and set their original position (y that aligns it all)		private function buildUI():void		{				//5.7 is the thumb width without the hit area			_thumbBounds = new Rectangle(thumb.width, 0, track.width);			_thumbBounds.y = track.y;			_thumbBounds.x = 0;						thumb.addEventListener(TouchEvent.TOUCH_BEGIN, onThumbStart);			thumb.addEventListener(TouchEvent.TOUCH_END, onThumbFinish);			thumb.addEventListener(TouchEvent.TOUCH_OUT, onThumbFinish);			thumb.addEventListener(TouchEvent.TOUCH_ROLL_OUT, onThumbFinish);			//track.addEventListener(TouchEvent.TOUCH_TAP, onTrackHit);						thumb.addEventListener(MouseEvent.MOUSE_DOWN, onThumbStart);			thumb.addEventListener(MouseEvent.MOUSE_UP, onThumbFinish);			thumb.addEventListener(MouseEvent.MOUSE_OUT, onThumbFinish);			thumb.addEventListener(MouseEvent.ROLL_OUT, onThumbFinish);			track.addEventListener(MouseEvent.CLICK, onTrackHit);					}				private function onThumbStart(e:Event):void		{			_scrubbing = true;			e.currentTarget.startDrag(false, _thumbBounds);		}				private function onThumbFinish(e:Event):void		{				if(_scrubbing)			{				e.currentTarget.stopDrag();				_scrubbing = false;				broadcastChange( getThumbValue(mouseX) );			}		}				private function onClick(e:MouseEvent):void		{			_scrubbing = true;		}				private function onTrackHit(e:Event):void		{			moveTrackTo(mouseX);		}				private function moveTrackTo(pos:Number):void		{			broadcastChange(pos);			Tweener.addTween(thumb, {x : pos, time : 0.5});		}				public function set thumbPos(aPos:int):void		{			thumb.x = aPos;		}				protected function getThumbValue(pos:Number):int		{			return Math.ceil( (pos / track.width) * 10 );		}				protected function broadcastChange(pos:Number):void		{			dispatchEvent(new GenericEvent(Event.CHANGE, getThumbValue(pos)) );			trace("DISPATCH GenericEvent");		}	}	}